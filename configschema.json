{
  "$schema": "http://json-schema.org/schema#",
  "$id": "http://github.com/tapis-project/tapisflask/schemas/configschema.json",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "server": {
      "type": "string",
      "pattern": "dev|prod",
      "default": "prod",
      "description": "configures whether to run the development server or the production server."
    },
    "service_name": {
      "type": "string",
      "description": "The name of the service, such as 'apps', 'jobs', etc."
    },
    "service_password": {
      "type": "string",
      "description": "The password for the service; used when calling the Tokens API to generate a service token.",
      "default": "5kY6WyiGMaY0ev0tqda2YKefTom"
    },
    "show_traceback": {
      "type": "boolean",
      "description": "Whether to show a full traceback when an exception occurs; should be false in production.",
      "default": false
    },
    "version": {
      "type": "string",
      "description": "The version string for the service, e.g., '3.24.1'.",
      "default": "dev"
    },
    "log_file": {
      "type": "string",
      "description": "Location of log file. If not set, STDOUT will be used."
    },
    "service_tenant_base_url": {
      "type": "string",
      "default": "https://master.develop.tapis.io",
      "description": "Base URL for the tenant where this service lives. This will be the URL to used for retrieving the service's Tapis token amd for retrieving initialization data such as tenant data and other basic configuration."
    },
    "service_tenant_id": {
      "type": "string",
      "default": "master",
      "description": "The tenant_id for the tenant where this service lives."
    },
    "tenants": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "The list of tenants that this service will serve requests for."
    },
    "use_sk": {
      "type": "boolean",
      "description": "Whether this service should use an external Tapis Security Kernel for its auth. NOTE: This should always be TRUE in production",
      "default": true
    },
    "use_tenants": {
      "type": "boolean",
      "description": "Whether this service should use an external Tapis Tenants API for retrieving the tenant registry. NOTE: This should always be TRUE in production",
      "default": true
    },
    "dev_jwt_public_key": {
      "type": "string",
      "description": "The public key associated with the private key to use for signing JWTs in dev mode. NOTE: This should NOT be used in production",
      "default": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz7rr5CsFM7rHMFs7uKIdcczn0uL4ebRMvH8pihrg1tW/fp5Q+5ktltoBTfIaVDrXGF4DiCuzLsuvTG5fGElKEPPcpNqaCzD8Y1v9r3tfkoPT3Bd5KbF9f6eIwrGERMTs1kv7665pliwehz91nAB9DMqqSyjyKY3tpSIaPKzJKUMsKJjPi9QAS167ylEBlr5PECG4slWLDAtSizoiA3fZ7fpngfNr4H6b2iQwRtPEV/EnSg1N3Oj1x8ktJPwbReKprHGiEDlqdyT6j58l/I+9ihR6ettkMVCq7Ho/bsIrwm5gP0PjJRvaD5Flsze7P4gQT37D1c5nbLR+K6/T0QTiyQIDAQAB\n-----END PUBLIC KEY-----"
    },
    "dev_base_url": {
      "type": "string",
      "description": "The base URL to use for the dev tenant in dev mode. NOTE: This should NOT be used in production",
      "default": "https://dev.develop.tapis.io"
    },
    "dev_token_service": {
      "type": "string",
      "description": "The URL to the token service to use for the dev tenant in dev mode. NOTE: This should NOT be used in production",
      "default": "https://dev.develop.tapis.io/v3/tokens"
    },
    "dev_authenticator": {
      "type": "string",
      "description": "The URL to the authenticator to use for the dev tenant in dev mode. NOTE: This should NOT be used in production",
      "default": "https://dev.develop.tapis.io/v3/oauth2"
    },
    "dev_security_kernel": {
      "type": "string",
      "description": "The URL to the SK to use for the dev tenant in dev mode. NOTE: This should NOT be used in production",
      "default": "https://dev.develop.tapis.io/v3/security"
    },
    "dev_is_owned_by_associate_site": {
      "type": "boolean",
      "description": "Whether the dev tenant in dev mode is owned by an A.S. NOTE: This should NOT be used in production",
      "default": false
    },
    "dev_allowable_x_tenant_ids": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of x_allowable_tenant_ids for the dev tenant in dev mode. NOTE: This should NOT be used in production",
      "default": [
        "dev"
      ]
    },
    "dev_iss": {
      "type": "string",
      "description": "The URL to use for the 'iss' claim in dev mode. NOTE: This should NOT be used in production",
      "default": "https://dev.api.tapis.io/v3/tokens"
    },
    "log_level_global": {
      "type": "string",
      "pattern": "DEBUG|INFO|WARN|ERROR|CRITICAL",
      "default": "INFO",
      "description": "The global logging level to use for the service."
    },
    "log_level_worker": {
      "type": "string",
      "pattern": "DEBUG|INFO|WARN|ERROR|CRITICAL",
      "description": "The logging level to use for the worker module."
    },
    "log_level_docker_utils": {
      "type": "string",
      "pattern": "DEBUG|INFO|WARN|ERROR|CRITICAL",
      "description": "The logging level to use for the docker_utils module."
    },
    "log_level_spawner": {
      "type": "string",
      "pattern": "DEBUG|INFO|WARN|ERROR|CRITICAL",
      "description": "The logging level to use for the spawner module."
    },
    "log_level_controllers": {
      "type": "string",
      "pattern": "DEBUG|INFO|WARN|ERROR|CRITICAL",
      "description": "The logging level to use for the controllers module."
    },
    "log_file_global": {
      "type": "string",
      "description": "File path to write logs for all modules. Must already exist.",
      "default": "/var/log/abaco.log"
    },
    "log_file_worker": {
      "type": "string",
      "description": "File path to write logs for worker module. Must already exist.",
      "default": "/var/log/abaco.log"
    },
    "log_file_docker_utils": {
      "type": "string",
      "description": "File path to write logs for docker_utils module. Must already exist.",
      "default": "/var/log/abaco.log"
    },
    "log_file_spawner": {
      "type": "string",
      "description": "File path to write logs for spawner module. Must already exist.",
      "default": "/var/log/abaco.log"
    },
    "log_file_controllers": {
      "type": "string",
      "description": "File path to write logs for controllers module. Must already exist.",
      "default": "/var/log/abaco.log"
    },
    "log_filing_strategy": {
      "type": "string",
      "pattern": "split|combined",
      "description": "Log file strategy. Either all to one file (combined) or to split files (split).",
      "default": "combined"
    },
    "store_mongo_host": {
      "type": "string",
      "description": "The url for the mongo instance."
    },
    "store_mongo_port": {
      "type": "integer",
      "description": "The port to access the mongo instance."
    },
    "store_mongo_user": {
      "type": "string",
      "description": "The username for the mongo instance if authentication is active."
    },
    "store_mongo_password": {
      "type": "string",
      "description": "The password for the mongo instance if authentication is active."
    },
    "rabbit_uri": {
      "type": "string",
      "description": "URI for rabbitMQ."
    },
    "spawner_host_id": {
      "type": "integer",
      "description": "Unique host_id for worker host. Each host should have at least one spawner and health check worker.",
      "default": 0
    },
    "spawner_host_queues": {
      "type": "array",
      "description": "List of queues that spawners on this host will subscribe to."
    },
    "spawner_host_ip": {
      "type": "string",
      "description": "An addressable IP for the spawner's host. (Not currently used)"
    },
    "spawner_max_cmd_length": {
      "type": "integer",
      "description": "Maximum number of messages that the autoscaler should put on the default command channel.",
      "default":12
    },
    "spawner_max_workers_per_host": {
      "type": "integer",
      "description": "Maximum number of workers that are allowed to simultaneously be running on a given compute host.",
      "default": 75
    },
    "spawner_max_workers_per_actor": {
      "type": "integer",
      "description": "Maximum number of workers that a given actor can have at one time.",
      "default": 6
    },
    "spawner_docker_network": {
      "type": "string",
      "description": "Sets worker and spawner network. Otherwise uses default network for host",
      "default": null
    },
    "spawner_abaco_conf_host_path": {
      "type": "string",
      "description": "Sets abaco conf host path if it is not set by environment variable"
    },
    "docker_dd": {
      "type": "string",
      "description": "url to use for docker daemon by spawners and workers."
    },
    "worker_init_count": {
      "type": "integer",
      "description": "Number of worker containers to initially start when an actor is created.",
      "default": 1
    },
    "worker_autoscaling": {
      "type": "boolean",
      "description": "Set whether or not autoscaling is enabled."
    },
    "worker_max_run_time": {
      "type": "integer",
      "description": "Max length of time (secs) an actor is allowed to execute before being killed. (-1 = indefinite)",
      "default": -1
    },
    "worker_mem_limit": {
      "type": "integer",
      "description": "Maximum amount of memory an Actor container can use. Like --memory flag for Docker. (-1 = unlimited)",
      "default": -1
    },
    "worker_max_cpus": {
      "type": "integer",
      "description": "Maximum number of CPUs available to each actor. (Not a guarantee) (-1 = unlimited)",
      "default": 1000000000
    },
    "worker_worker_ttl": {
      "type": "integer",
      "description": "Length of time (secs) to keep an idle worker alive. (-1 = indefinite)",
      "default": -1
    },
    "worker_sync_max_idle_time": {
      "type": "integer",
      "description": "Length of time (secs) to keep an idle worker alive when actor has the 'sync' hint.",
      "default":600
    },
    "worker_auto_remove": {
      "type": "boolean",
      "description": "Whether worker should be scheduled with 'auto_remove' flag. Limited to docker version > 1.25.",
      "default":true
    },
    "worker_privileged_mounts": {
      "type": "array",
      "description": "The mounts for a 'privileged' actor containers."
    },
    "worker_leave_containers": {
      "type": "boolean",
      "description": "Whether to leave the actor containers or remove them. True is helpful for debugging.",
      "default": false
    },
    "worker_socket_host_path_dir": {
      "type": "string",
      "description": "Path on workers host to use for mounting temp socekts for processing exec results.",
      "default": null
    },
    "worker_fifo_host_path_dir": {
      "type": "string",
      "description": "Path on workers host to use for mounting temp fifo's for processing binary messages.",
      "default": null
    },
    "web_access_control": {
      "type": "string",
      "description": "Type of access control for web front end.",
      "pattern": "jwt|none"
    },
    "web_user_role": {
      "type": "string",
      "description": "The role required for 'base level' access to the service. Only used with JWT access control."
    },
    "web_accept_nonce": {
      "type": "boolean",
      "description": "Enables use of nonce for auth with API. x-nonce param is only checked in absence of a JWT header."
    },
    "web_tenant_name": {
      "type": "string",
      "description": "The name of the tenant when not using JWT."
    },
    "web_apim_public_key": {
      "type": "string",
      "description": "Public key for the apim instance when deployed behind apim (jwt access control)"
    },
    "web_show_traceback": {
      "type": "boolean",
      "description": "Whether the web apps return a stacktrace or a nice JSON object on an APIException.",
      "default":false
    },
    "web_log_ex": {
      "type": "integer",
      "description": "Amount of time (secs) to store log data. (-1 = indefinite)",
      "default": 43200
    },
    "web_max_log_length": {
      "type": "integer",
      "description": "Max length (bytes) to store an actors exec's logs. Truncated otherwise. Cannot exceed max mongo doc len.",
      "default":1000000
    },
    "web_case": {
      "type": "string",
      "description": "Either to use camel or snake case. Changes return responses. Default is snake.",
      "pattern": "camel|snake"
    },
    "web_max_content_length": {
      "type": "integer",
      "description": "Maximum content length (bytes) allow for raw (binary) data messages.",
      "default": 500000000
    },
    "web_all_queues": {
      "type": "array",
      "description": "List of all allowable queues"
    },
    "global_auth_object": {
      "type": "object",
      "description": "Object containing global parameters which tenants may overwrite at times.",
      "additionalProperties": false,
      "properties": {
        "use_tas_uid": {
          "type": "boolean",
          "default": false
        },
        "actor_uid": {
          "type": "integer"
        },
        "actor_gid": {
          "type": "integer"
        },
        "default_token": {
          "type": "boolean",
          "description": "Default value for an actor's token attribute. Set globally.",
          "default": false
        },
        "generate_clients": {
          "type": "boolean",
          "default": false
        },
        "actor_homedir":{
          "type":"string"
        },
        "global_mounts": {
          "type": "array",
          "items": {
            "type": "string"
          },    
          "default": [
            "/data1:/_abaco_data1:ro",
            "/data2/{tenant_id}/{username}:/_abaco_data2:rw"    
          ]
        }
      },
      "oneOf": [
        {
          "properties": {
            "use_tas_uid": {
              "type": "boolean",
              "enum": [
                true
              ]
            }
          },
          "required": [
            "use_tas_uid"
          ]
        },
        {
          "required": [
            "actor_uid",
            "actor_gid"
          ]
        },
        {
          "properties": {
            "use_tas_uid": {
              "type": "boolean",
              "enum": [
                false,
                null
              ]
            },
            "actor_gid": {
              "type":"integer",
              "enum": [
                null
              ]
            },
            "actor_uid": {
              "type":"integer",
              "enum": [
                null
              ]
            }
          }
        }
      ]
    }
  },
  "patternProperties": {
    "^.*_auth_object": {
      "type": "object",
      "description": "Object containing tenant based properties.",
      "additionalProperties": false,
      "properties": {
        "use_tas_uid": {
          "type": "boolean"
        },
        "actor_uid": {
          "type": "integer"
        },
        "actor_gid": {
          "type": "integer"
        },
        "default_token": {
          "type": "boolean",
          "description": "Default value for an actor's token attribute. Set by tenant."
        },
        "generate_clients": {
          "type": "boolean"
        },
        "actor_homedir":{
          "type":"string"
        },
        "global_mounts": {
          "type": "array",
          "items": {
            "type": "string"
          }    
        }
      },
      "oneOf": [
        {
          "properties": {
            "use_tas_uid": {
              "type":"boolean",
              "enum": [
                true
              ]
            }
          },
          "required": [
            "use_tas_uid"
          ]
        },
        {
          "required": [
            "actor_uid",
            "actor_gid"
          ]
        },
        {
          "properties": {
            "use_tas_uid": {
              "type":"boolean",
              "enum": [
                false,
                null
              ]
            },
            "actor_gid": {
              "type":"integer",
              "enum": [
                null
              ]
            },
            "actor_uid": {
              "type":"integer",
              "enum": [
                null
              ]
            }
          }
        }
      ]
    }
  },
  "required":[
    "service_name",
    "version",
    "log_level.global",
    "store_mongo_host",
    "store_mongo_port",
    "rabbit_uri",
    "global_auth_object",
    "worker_socket_host_path_dir",
    "spawner_host_id",
    "worker_fifo_host_path_dir"
 ]
}